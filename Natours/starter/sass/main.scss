$color-primary: #a3e635;
$color-primary-light: #d9f99d;
$color-primary-dark: #65a30d;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	// inherit from body
	box-sizing: inherit;
}

html {
	font-size: 62.5%;
}

body {
	font-family: 'Lato', sans-serif;
	font-weight: 400;
	font-size: 1.6rem;
	line-height: 1.7;
	color: $color-grey-dark;

	// children won't get inherited from this style, the padding will only applies to body
	padding: 3rem;

	box-sizing: border-box;
}

.header {
	height: 95vh;
	// This only works in sass, not in css
	background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.6), rgba($color-primary, 0.6)), url(../img/hero.jpg);
	background-size: cover;
	background-position: top;

	clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

	position: relative;
}

.header__logo-box {
	position: absolute;
	top: 4rem;
	left: 4rem;
}
.header__logo {
	height: 3.5rem;
}

.header__text-box {
	position: absolute;
	top: 40%;
	left: 50%;
	transform: translate(-50%, -50%);

	text-align: center;
}

.heading-primary {
	color: $color-white;
	text-transform: uppercase;
	margin-bottom: 6rem;

	// Maybe in some browsers, the animation of heading will shake at the last mintues, this is to prevent
	backface-visibility: hidden;
}
.heading-primary--main {
	display: block;
	font-size: 6rem;
	font-weight: 400;
	letter-spacing: 3.5rem;

	animation-name: moveInLeft;
	animation-duration: 1s;
	animation-timing-function: ease-out;
	// animation-delay: 1s;
	// animation-iteration-count: 2;
}
.heading-primary--sub {
	display: block;
	font-size: 2rem;
	font-weight: 700;
	letter-spacing: 1.7rem;

	animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
	0% {
		opacity: 0;
		transform: translate(-10rem, 2rem);
	}
	80% {
		transform: translateX(1rem);
	}
	100% {
		opacity: 1;
		transform: translate(0);
	}
}

@keyframes moveInRight {
	0% {
		opacity: 0;
		transform: translate(10rem, -2rem);
	}
	80% {
		transform: translateX(-1rem);
	}
	100% {
		opacity: 1;
		transform: translate(0);
	}
}

@keyframes moveInBottom {
	0% {
		opacity: 0;
		transform: translate(0, 5rem);
	}
	80% {
		transform: translateY(-0.5rem);
	}
	100% {
		opacity: 1;
		transform: translate(0);
	}
}

.btn:link,
.btn:visited {
	text-transform: uppercase;
	text-decoration: none;
	padding: 1.5rem 4rem;
	display: inline-block;
	border-radius: 100px;
	transition: all 0.2s;

	position: relative;
}
.btn:hover {
	transform: translateY(-3px);
	box-shadow: 0 1rem 2rem rgba($color-black, 0.2);
}
.btn:active {
	transform: translateY(-1px);
	box-shadow: 0 0.5rem 0.5rem rgba($color-black, 0.2);
}

.btn--white {
	background-color: $color-white;
	color: $color-grey-dark;
}

.btn--animated {
	animation: moveInBottom 0.5s ease-out 0.75s;

	// animation-fill-mode: sets how an animation applies styles to its target BEFORE and AFTER its execution.
	// backwards: the animation will apply the values defined in the FIRST relevant keyframe as soon as it is applied to the target, and retain this during the animation-delay period.
	animation-fill-mode: backwards;
}

// These 'two' after pseudo elements are the same element
.btn::after {
	content: '';
	display: inline-block;
	height: 100%;
	width: 100%;
	border-radius: 100px;
	position: absolute;
	top: 0;
	left: 0;
	z-index: -1;

	transition: all 0.4s;
}
.btn--white::after {
	background-color: $color-white;
}

// Note the syntax, it is the after element when hovering on the button, and the initial state is .btn::after
.btn:hover::after {
	transform: scaleX(1.4) scaleY(1.6);
	opacity: 0;
}
